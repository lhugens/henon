#LyX 2.3 created this file. For more info see http://www.lyx.org/
\lyxformat 544
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\begin_preamble
\usepackage{indentfirst}
\usepackage{mathtools}
\usepackage{listings}
\usepackage{tikz}
\usetikzlibrary{shapes.geometric, arrows}

\tikzstyle{startstop} = [rectangle, rounded corners, minimum width=3cm, minimum height=1cm,text centered, draw=black]
\tikzstyle{io} =        [trapezium, trapezium left angle=85, trapezium right angle=95, minimum width=1cm, minimum height=1cm, text centered, draw=black]
\tikzstyle{arrow} = [thick,->,>=stealth]
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding utf8
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\use_microtype false
\use_dash_ligatures true
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement H
\paperfontsize default
\spacing double
\use_hyperref false
\papersize default
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\use_minted 0
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2cm
\topmargin 2cm
\rightmargin 2cm
\bottommargin 2cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\is_math_indent 0
\math_numbering_side default
\quotes_style english
\dynamic_quotes 0
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Title
Finding rare trajectories in transiently chaotic systems
\end_layout

\begin_layout Author
Leonardo L.
 D.
 L.
 Hügens
\begin_inset Newline newline
\end_inset

J.
 M.
 Viana Parente Lopes
\begin_inset Newline newline
\end_inset

Eduardo G.
 Altmann
\end_layout

\begin_layout Section*
Introduction
\end_layout

\begin_layout Standard
Given a specific dynamical system, with an associated map 
\begin_inset Formula $\boldsymbol{r}_{n+1}=\boldsymbol{F}\left(\boldsymbol{r}_{n}\right)$
\end_inset

, it is possible to define an escape time 
\begin_inset Formula $t(\boldsymbol{r})$
\end_inset

 as the number of the map iterations necessary for the trajectory to leave
 a certain domain 
\begin_inset Formula $\Gamma$
\end_inset

.
 The main goal of this study is to perform a comparative analysis between
 computer algorithms specificaly designed for an efficient search of long
 trajectories and generic maximization algorithms.
\end_layout

\begin_layout Section*
Map Parameters
\end_layout

\begin_layout Standard
For this study, we used the iconic Hénon Map with 
\begin_inset Formula $k=6$
\end_inset

:
\end_layout

\begin_layout Standard
\align center
\begin_inset Formula $x_{n+1}=k-x_{n}²-y_{n}$
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Formula $y_{n+1}=x_{n}$
\end_inset


\end_layout

\begin_layout Standard
\paragraph_spacing double
The associated Jacobian matrix is 
\begin_inset Formula $\mathbf{{J(\mathbf{x})}}=\left(\begin{array}{cc}
-2x_{n} & -1\\
1 & 0
\end{array}\right)$
\end_inset

, and the respective determinant is 
\begin_inset Formula $J(\mathbf{x})=1$
\end_inset

.
 Its eigenvalues and eigenvectors are respectively 
\begin_inset Formula $e_{\pm}=-x\pm\sqrt{x²-1}$
\end_inset

 and 
\begin_inset Formula $\mathbf{e_{\pm}}=(e_{\pm},1)$
\end_inset

.
 
\end_layout

\begin_layout Standard
The Lyapunov exponent is, therefore:
\end_layout

\begin_layout Standard
\align center
\begin_inset Formula $\lambda_{n}(\boldsymbol{x})=\frac{1}{n}\sum_{i=0}^{t-1}log(J(\mathbf{x}))=0$
\end_inset


\end_layout

\begin_layout Standard
The largest escape time generated yet by a multicanonical simulation on
 
\begin_inset Formula $\Gamma=[-5,9]²$
\end_inset

 algorithm is 627 map iterations.
\end_layout

\begin_layout Standard
The landscape obtained is represented below:
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename pictures/colormap.png
	display false
	scale 50

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Landscape of the henon map with k = 6.
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section*
Generic Maximization Algorithms
\end_layout

\begin_layout Standard
The source 
\begin_inset CommandInset href
LatexCommand href
target "https://docs.scipy.org/doc/scipy/reference/tutorial/optimize.html"

\end_inset

 provides several generic minimization algorithms implemented in the scipy.optimi
ze package, ready to use.
\end_layout

\begin_layout Standard
The following algorithms are automatically unusable due to the need of a
 gradient of the function to be minimized, which is generaly impossible
 to obtain due to the roughness of the landscape: Newton-Conjugate-Gradient
 (NCG), Trust-Region NCG, Trust-Region Truncated Generalized Lanczos / NCG,
 Trust-Region Nearly Exact.
 
\end_layout

\begin_layout Standard
At first sight, the usable algorithms are those who only rely on the evaluation
 of the function, those which belong to the 
\series bold
Pattern Search
\series default
 family (also known as direct search, derivative search, or black-box search).
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
newpage{}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Multicanonical Sampling
\end_layout

\begin_layout Standard
\paragraph_spacing double
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}[node distance=1.5cm, bend angle=90] 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
node (start) [startstop] {$
\backslash
boldsymbol{r}$, $t = t(
\backslash
boldsymbol{r}, T_{limit}=T_{max})$};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
node (g) [startstop, below of=start] {$
\backslash
boldsymbol{r}^{
\backslash
prime}$ from distribution  $g
\backslash
left(
\backslash
boldsymbol{r} 
\backslash
rightarrow 
\backslash
boldsymbol{r}^{
\backslash
prime}
\backslash
right)=
\backslash
frac{1}{
\backslash
sigma(t)} e^{-
\backslash
left|
\backslash
boldsymbol{r}-
\backslash
boldsymbol{r}^{
\backslash
prime}
\backslash
right| / 
\backslash
sigma(t)}$};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
node (box) [startstop, below of=g] {$
\backslash
boldsymbol{r}^{
\backslash
prime} 
\backslash
in$ Domain ?};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
node(tline) [startstop, below of=box] {$t^{
\backslash
prime} = t(
\backslash
boldsymbol{r}^{
\backslash
prime}, T_{limit}=T_{max}+10)$};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
node(less) [startstop, below of=tline, xshift=-2cm]  {$t^{
\backslash
prime} < t$};
\end_layout

\begin_layout Plain Layout


\backslash
node(cless)[startstop, below of=less] {$
\backslash
sigma(t) 
\backslash
equiv 
\backslash
frac{
\backslash
sigma(t)}{e^f}$};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
node(more) [startstop, below of=tline, xshift=2cm]  {$(t^{
\backslash
prime} = t) 
\backslash
land (
\backslash
sigma(t) < 10)$};
\end_layout

\begin_layout Plain Layout


\backslash
node(cmore)[startstop, below of=more] {$
\backslash
sigma(t) 
\backslash
equiv 
\backslash
sigma(t)e^f$};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
node(tbox) [startstop, below of=cless, xshift=2cm] {$T_{min} < t^{
\backslash
prime} < T_{max}$ ?};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
node(a) [startstop, below of=tbox, yshift = -0.5cm] {
\end_layout

\begin_layout Plain Layout

$
\backslash
begin{aligned} 
\end_layout

\begin_layout Plain Layout

A
\backslash
left(
\backslash
boldsymbol{r} 
\backslash
rightarrow 
\backslash
boldsymbol{r}^{
\backslash
prime}
\backslash
right){} 
\end_layout

\begin_layout Plain Layout

& =
\backslash
min 
\backslash
left
\backslash
{1, 
\backslash
frac{
\backslash
rho(t)}{
\backslash
rho(t^{
\backslash
prime})} 
\backslash
frac{g
\backslash
left(
\backslash
boldsymbol{r}^{
\backslash
prime} 
\backslash
rightarrow 
\backslash
boldsymbol{r}
\backslash
right)}{g
\backslash
left(
\backslash
boldsymbol{r} 
\backslash
rightarrow 
\backslash
boldsymbol{r}^{
\backslash
prime}
\backslash
right)}
\backslash
right
\backslash
} 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

& = 
\backslash
min 
\backslash
left
\backslash
{1, 
\backslash
frac{
\backslash
sigma(t)}{
\backslash
sigma(t^{
\backslash
prime})} 
\backslash
text{exp}
\backslash
left(
\backslash
left|
\backslash
boldsymbol{r}-
\backslash
boldsymbol{r}^{
\backslash
prime}
\backslash
right|   
\backslash
left(
\backslash
frac{1}{
\backslash
sigma(t)}-
\backslash
frac{1}{
\backslash
sigma(t^{
\backslash
prime})}
\backslash
right)+(S(t)-S(t^{
\backslash
prime})    
\backslash
right) 
\backslash
right
\backslash
}
\end_layout

\begin_layout Plain Layout


\backslash
end{aligned}$};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
node(rand)[startstop, below of=a, yshift = -0.5cm] {$
\backslash
text{random}([0,1])< A$ ?};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
node(sub)[startstop, below of=rand, xshift = 3cm]{$t 
\backslash
equiv t^{
\backslash
prime}$ ; $
\backslash
boldsymbol{r} 
\backslash
equiv 
\backslash
boldsymbol{r^{
\backslash
prime}}$};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
node(end)[startstop, below of=sub, xshift = -3cm]{$S(t) 
\backslash
equiv S(t)+f$};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
draw [arrow] (start) -- (g); 
\end_layout

\begin_layout Plain Layout


\backslash
draw [arrow] (g) -- (box); 
\end_layout

\begin_layout Plain Layout


\backslash
draw [arrow] (box) -- node[anchor=east] {yes} (tline); 
\end_layout

\begin_layout Plain Layout


\backslash
draw [arrow] (tline) -- node[anchor=east] {if} (less);
\end_layout

\begin_layout Plain Layout


\backslash
draw [arrow] (tline) -- node[anchor=west] {if} (more);
\end_layout

\begin_layout Plain Layout


\backslash
draw [arrow] (tline) -- node[anchor=east] {else} (tbox);
\end_layout

\begin_layout Plain Layout


\backslash
draw [arrow] (less) -- (cless); 
\end_layout

\begin_layout Plain Layout


\backslash
draw [arrow] (more) -- (cmore); 
\end_layout

\begin_layout Plain Layout


\backslash
draw [arrow] (cless) -- (tbox); 
\end_layout

\begin_layout Plain Layout


\backslash
draw [arrow] (cmore) -- (tbox);
\end_layout

\begin_layout Plain Layout


\backslash
draw [arrow] (tbox) -- node[anchor=east] {yes} (a);
\end_layout

\begin_layout Plain Layout


\backslash
draw [arrow] (a) -- (rand);
\end_layout

\begin_layout Plain Layout


\backslash
draw [arrow] (rand) -- node[anchor=west] {yes} (sub);
\end_layout

\begin_layout Plain Layout


\backslash
draw [arrow] (rand) -- node[anchor=east] {no} (end);
\end_layout

\begin_layout Plain Layout


\backslash
draw [arrow] (sub) -- (end);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
draw [arrow] (tbox) edge [bend left] node[anchor=east] {no} (g);
\end_layout

\begin_layout Plain Layout


\backslash
draw [arrow] (box) edge [bend left] node[anchor=east] {no} (g);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
newpage{}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\paragraph_spacing double
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}[node distance=1.5cm, bend angle=90] 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
node (start) [startstop] 
\end_layout

\begin_layout Plain Layout

{$
\backslash
begin{aligned} 
\end_layout

\begin_layout Plain Layout

 
\backslash
text{Arguments : } & 
\backslash
boldsymbol{r_{0}} = (x_{0},y_{0})
\backslash
text{ ; } T_{limit} 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

 
\backslash
text{Initialize : } & t 
\backslash
equiv 0 
\backslash
text{ ; } 
\backslash
boldsymbol{r} = 
\backslash
boldsymbol{r_{0}}
\end_layout

\begin_layout Plain Layout


\backslash
end{aligned}$};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
node (map) [startstop, below of=start, yshift = -1.2cm]
\end_layout

\begin_layout Plain Layout

{$
\backslash
begin{aligned} 
\end_layout

\begin_layout Plain Layout

 x^{
\backslash
prime} & 
\backslash
equiv k-x^{2}-y 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

 x^{
\backslash
prime} & 
\backslash
equiv k-x^{2}-y 
\backslash

\backslash

\end_layout

\begin_layout Plain Layout

 t          & 
\backslash
equiv t+1
\end_layout

\begin_layout Plain Layout


\backslash
end{aligned}$};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
node (box) [startstop, below of=map, yshift=-1cm] 
\end_layout

\begin_layout Plain Layout

{($
\backslash
boldsymbol{r}^{
\backslash
prime} 
\backslash
in 
\backslash
text{Domain}) 
\backslash
land (T_{min} < t^{
\backslash
prime} < T_{limit})$ ?};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
node (repeat) [startstop, below of=box, xshift = -2cm]{$
\backslash
boldsymbol{r} = 
\backslash
boldsymbol{r^{
\backslash
prime}}$};
\end_layout

\begin_layout Plain Layout


\backslash
node (end) [startstop, below of=box, xshift = 2cm]{$t(
\backslash
boldsymbol{r_{0}}) = t$};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
draw [arrow] (start) -- (map);
\end_layout

\begin_layout Plain Layout


\backslash
draw [arrow] (map) -- (box);
\end_layout

\begin_layout Plain Layout


\backslash
draw [arrow] (box) -- node[anchor=west] {no} (end);
\end_layout

\begin_layout Plain Layout


\backslash
draw [arrow] (box) -- node[anchor=east] {yes} (repeat);
\end_layout

\begin_layout Plain Layout


\backslash
draw [arrow] (repeat) edge [bend left] (map);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
newpage{}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Nelder-Mead Algorithm
\end_layout

\begin_layout Standard
Reference: Gao, F.
 and Han, L.
 Implementing the Nelder-Mead simplex algorithm with adaptive parameters.
 2012.
 Computational Optimization and Applications.
 51:1, pp.
 259-277
\end_layout

\begin_layout Standard
Let 
\begin_inset Formula $f:\mathbb{R}^{n}\rightarrow\mathbb{R}$
\end_inset

 be the function to be minimized.
 A n-dimensional simplex is the convex hull (smallest convex set) delimited
 by n+1 points (vertices).
 Let 
\begin_inset Formula $\Delta$
\end_inset

 denote the simplex and 
\begin_inset Formula $\mathbf{x}_{1}$
\end_inset

,...,
\begin_inset Formula $\mathbf{x}_{n+1}$
\end_inset

 the vertices which define it.
 The method makes use of the following definitions, with 
\begin_inset Formula $\alpha>0$
\end_inset

, 
\begin_inset Formula $\beta>1$
\end_inset

, 
\begin_inset Formula $0<\gamma<1$
\end_inset

 and 
\begin_inset Formula $0<\delta<1$
\end_inset

.
\end_layout

\begin_layout Standard
\paragraph_spacing double
One iteration of the algorithm proceeds as follows:
\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
\paragraph_spacing double
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}[node distance=1.5cm] 
\end_layout

\begin_layout Plain Layout


\backslash
node (start) [startstop] {$
\backslash
mathbf{x}_{1}, 
\backslash
mathbf{x}_{1}, 
\backslash
dots, 
\backslash
mathbf{x}_{n+1}$};
\end_layout

\begin_layout Plain Layout


\backslash
node (centroid) [startstop, below of=start] {$
\backslash
overline{
\backslash
mathbf{x}}=
\backslash
frac{1}{n} 
\backslash
sum_{i=1}^{n} 
\backslash
mathbf{x}_{i}$}; 
\end_layout

\begin_layout Plain Layout


\backslash
node (r) [startstop, below of=centroid] {$
\backslash
mathbf{x}_{r}=
\backslash
overline{
\backslash
mathbf{x}}+
\backslash
alpha
\backslash
left(
\backslash
overline{
\backslash
mathbf{x}}-
\backslash
mathbf{x}_{n+1}
\backslash
right)$}; 
\end_layout

\begin_layout Plain Layout


\backslash
draw [arrow] (start) -- (centroid); 
\backslash
draw [arrow] (centroid) -- (r);
\end_layout

\begin_layout Plain Layout


\backslash
node (fr) [startstop, below of=r] {$f_{r}=f
\backslash
left(
\backslash
mathbf{x}_{r}
\backslash
right)$}; 
\backslash
draw [arrow] (r) -- (fr);
\end_layout

\begin_layout Plain Layout


\backslash
node (cond1) [startstop, below of=fr, xshift=-6cm] {If $ f_{1} 
\backslash
leq f_{r}<f_{n}$}; 
\end_layout

\begin_layout Plain Layout


\backslash
node (cond2) [startstop, below of=fr, xshift=-2cm] {If $ f_{r}<f_{1}$};
 
\end_layout

\begin_layout Plain Layout


\backslash
node (cond3) [startstop, below of=fr, xshift=2cm] {If $ f_{n} 
\backslash
leq f_{r}<f_{n+1}$};
\end_layout

\begin_layout Plain Layout


\backslash
node (cond4) [startstop, below of=fr, xshift=6cm] {If $ f_{r} 
\backslash
geq f_{n+1}$};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
draw [arrow] (fr) -- (cond1); 
\backslash
draw [arrow] (fr) -- (cond2); 
\backslash
draw [arrow] (fr) -- (cond3); 
\backslash
draw [arrow] (fr) -- (cond4);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
node (endr) [startstop, below of=cond1] {$
\backslash
mathbf{x}_{n+1}
\backslash
equiv
\backslash
mathbf{x}_{r}$}; 
\end_layout

\begin_layout Plain Layout


\backslash
node (e) [startstop, below of=cond2] {$
\backslash
mathbf{x}_{e}=
\backslash
overline{
\backslash
mathbf{x}}+
\backslash
beta
\backslash
left(
\backslash
mathbf{x}_{r}-
\backslash
overline{
\backslash
mathbf{x}}
\backslash
right)$}; 
\end_layout

\begin_layout Plain Layout


\backslash
node (oc) [startstop, below of=cond3] {$
\backslash
mathbf{x}_{o c}=
\backslash
overline{
\backslash
mathbf{x}}+
\backslash
gamma
\backslash
left(
\backslash
mathbf{x}_{r}-
\backslash
overline{
\backslash
mathbf{x}}
\backslash
right)$}; 
\end_layout

\begin_layout Plain Layout


\backslash
node (ic) [startstop, below of=cond4] {$
\backslash
mathbf{x}_{i c}=
\backslash
overline{
\backslash
mathbf{x}}-
\backslash
gamma
\backslash
left(
\backslash
mathbf{x}_{r}-
\backslash
overline{
\backslash
mathbf{x}}
\backslash
right)$}; 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
draw [arrow] (cond1) -- (endr); 
\backslash
draw [arrow] (cond2) -- (e); 
\backslash
draw [arrow] (cond3) -- (oc); 
\backslash
draw [arrow] (cond4) -- (ic);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
node (fe) [startstop, below of=e] {$f_{e}=f
\backslash
left(
\backslash
mathbf{x}_{e}
\backslash
right)$}; 
\end_layout

\begin_layout Plain Layout


\backslash
node (foc) [startstop, below of=oc] {$f_{o c}=f
\backslash
left(
\backslash
mathbf{x}_{o c}
\backslash
right)$}; 
\end_layout

\begin_layout Plain Layout


\backslash
node (fic) [startstop, below of=ic] {$f_{i c}=f
\backslash
left(
\backslash
mathbf{x}_{i c}
\backslash
right)$};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
draw [arrow] (e) -- (fe); 
\backslash
draw [arrow] (oc) -- (foc); 
\backslash
draw [arrow] (ic) -- (fic);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
node (conde) [startstop, below of=fe, xshift=-3cm] {Is $f_{e}<f_{r}$ ?};
 
\end_layout

\begin_layout Plain Layout


\backslash
node (condoc) [startstop, below of=foc, xshift=-2cm] {Is $f_{o c} 
\backslash
leq f_{r}$ ?}; 
\end_layout

\begin_layout Plain Layout


\backslash
node (condic) [startstop, below of=fic, xshift=-1cm] {Is $f_{i c}<f_{n+1}$
 ?}; 
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
draw [arrow] (fe) -- (conde); 
\backslash
draw [arrow] (foc) -- (condoc); 
\backslash
draw [arrow] (fic) -- (condic);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
node (ende) [startstop, below of=conde, xshift=-1.5cm] {$
\backslash
mathbf{x}_{n+1}
\backslash
equiv
\backslash
mathbf{x}_{e}$}; 
\end_layout

\begin_layout Plain Layout


\backslash
node (endr2) [startstop, below of=conde, xshift=1.5cm] {$
\backslash
mathbf{x}_{n+1}
\backslash
equiv
\backslash
mathbf{x}_{r}$};
\end_layout

\begin_layout Plain Layout


\backslash
node (endoc) [startstop, below of=condoc, xshift=-0.3cm] {$
\backslash
mathbf{x}_{n+1}
\backslash
equiv
\backslash
mathbf{x}_{o c}$};
\end_layout

\begin_layout Plain Layout


\backslash
node (endic) [startstop, below of=condic, xshift=2cm] {$
\backslash
mathbf{x}_{n+1}
\backslash
equiv
\backslash
mathbf{x}_{i c}$};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
draw [arrow] (conde) -- node[anchor=east] {yes} (ende); 
\backslash
draw [arrow] (conde) -- node[anchor=west] {no} (endr2);
\end_layout

\begin_layout Plain Layout


\backslash
draw [arrow] (condoc) -- node[anchor=east] {yes} (endoc); 
\backslash
draw [arrow] (condic) -- node[anchor=west] {yes} (endic);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
node (shrink) [startstop, below of=condoc, xshift=3.3cm] {$
\backslash
mathbf{x}_{i} 
\backslash
equiv 
\backslash
mathbf{x}_{1}+
\backslash
delta
\backslash
left(
\backslash
mathbf{x}_{i}-
\backslash
mathbf{x}_{1}
\backslash
right)$};
\end_layout

\begin_layout Plain Layout


\backslash
draw [arrow] (condoc) -- node[anchor=west] {no} (shrink); 
\backslash
draw [arrow] (condic) -- node[anchor=east] {no} (shrink);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\begin_inset Newline newline
\end_inset


\end_layout

\begin_layout Standard
An optimal choice of initial vertices of the simplex and 
\begin_inset Formula $\{\alpha,\beta,\gamma,\delta\}$
\end_inset

 values is highly dependent on the nature of the problem.
 Althought there is no special termination condition associated with the
 algorithm, Nelder and Mead used the standard deviation of the values of
 the function on the vertices of the simplex.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
newpage{}
\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Powell's Method
\end_layout

\begin_layout Standard
References: Brent, Richard P.
 (1973).
 "Section 7.3: Powell's algorithm".
 Algorithms for minimization without derivatives; Flannery, BP (2007); Numerical
 Recipes: The Art of Scientific Computing.
\end_layout

\begin_layout Standard
To understand this method, we must first have the definition of 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textit{conjugate}
\end_layout

\end_inset

 directions.
 Consider the following Taylor series approximation to a function 
\begin_inset Formula $f(\mathbf{X})$
\end_inset

 and a point 
\begin_inset Formula $\mathbf{P}$
\end_inset

:
\end_layout

\begin_layout Standard
\align center
\begin_inset Formula $f(\mathbf{x})=f(\mathbf{P})+\sum_{i}\frac{\partial f}{\partial x_{i}}x_{i}+\frac{1}{2}\sum_{i,j}\frac{\partial^{2}f}{\partial x_{i}\partial x_{j}}x_{i}x_{j}+\cdots\approx c-\mathbf{b}\cdot\mathbf{x}+\frac{1}{2}\mathbf{x}\cdot\mathbf{A}\cdot\mathbf{x}$
\end_inset


\end_layout

\begin_layout Standard
\noindent
where
\end_layout

\begin_layout Standard
\align center
\begin_inset Formula $c\equiv f(\mathbf{P})\quad\mathbf{b}\equiv-\nabla f\left|\mathbf{P}\quad[\mathbf{A}]_{ij}\equiv\frac{\partial^{2}f}{\partial x_{i}\partial x_{j}}\right|_{\mathbf{P}}$
\end_inset


\end_layout

\begin_layout Standard
\noindent
and the approximation to the functions gradient:
\end_layout

\begin_layout Standard
\align center
\begin_inset Formula $\nabla f=\mathbf{A}\cdot\mathbf{x}-\mathbf{b}$
\end_inset


\end_layout

\begin_layout Standard
Therefore, the gradient will vanish - the function will be at a neighbouring
 extremum - at 
\begin_inset Formula $\mathbf{P+x}$
\end_inset

 where 
\begin_inset Formula $\mathbf{x}$
\end_inset

 is the solution to 
\begin_inset Formula $\mathbf{A}\cdot\mathbf{x}=\mathbf{b}$
\end_inset

.
 If we move along that direction to a minimum and now consider moving in
 a direction 
\begin_inset Formula $\mathbf{v}$
\end_inset

, in order not to ruin the previous minimization, we pretend that the gradient
 continues to be perpendicular to 
\begin_inset Formula $\mathbf{x}$
\end_inset

.
 Considering a change in the gradient:
\end_layout

\begin_layout Standard
\align center
\begin_inset Formula $\delta(\nabla f)=\mathbf{A}\cdot(\delta\mathbf{v})$
\end_inset


\end_layout

\begin_layout Standard
we therefore are interested in directions 
\begin_inset Formula $\mathbf{v}$
\end_inset

 that satisfy:
\end_layout

\begin_layout Standard
\align center
\begin_inset Formula $0=\mathbf{u}\cdot\delta(\nabla f)=\mathbf{u}\cdot\mathbf{A}\cdot\mathbf{v}$
\end_inset


\end_layout

\begin_layout Standard
When this equation holds for two directions 
\begin_inset Formula $\mathbf{u}$
\end_inset

 and 
\begin_inset Formula $\mathbf{v}$
\end_inset

, they are said to be 
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
textit{conjugate}
\end_layout

\end_inset

.
 Powell's method produces 
\begin_inset Formula $n$
\end_inset

 mutually conjugate directions for an objective 
\begin_inset Formula $n$
\end_inset

-dimensional function, and needs an 1-dimensional minimization algorithm
 such as Golden Search to minimize 
\begin_inset Formula $f(\mathbf{x})$
\end_inset

 in a particular direction.
 The initial directions 
\begin_inset Formula $\mathbf{u}_{0},...,\mathbf{u}_{i+1}$
\end_inset

 are usually chosen to be the cartesian basis vectors.
 An iteration of the algorithm is represented below.
\end_layout

\begin_layout Standard
\align center
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
begin{tikzpicture}[node distance=1.5cm] 
\end_layout

\begin_layout Plain Layout


\backslash
node (step0) [startstop] {$
\backslash
mathbf{x}_{0}$};
\end_layout

\begin_layout Plain Layout


\backslash
node (step1) [startstop, below of=step0] {For $i=1, 
\backslash
dots, N$, compute $
\backslash
beta_{i}$ to minimize $f
\backslash
left(
\backslash
mathbf{x}_{i-1}+
\backslash
beta_{i} 
\backslash
mathbf{u}_{i}
\backslash
right)$ and define $
\backslash
mathbf{x}_{i} 
\backslash
equiv 
\backslash
mathbf{x}_{i-1}+
\backslash
beta_{i} 
\backslash
mathbf{u}_{i}$};
\end_layout

\begin_layout Plain Layout


\backslash
node (step3) [startstop, below of=step1] {$
\backslash
mathbf{u}_{i} 
\backslash
equiv 
\backslash
mathbf{u}_{i+1}$ for $i=1, 
\backslash
dots, N-1 $ and $
\backslash
mathbf{u}_{n} 
\backslash
equiv 
\backslash
mathbf{x}_{n}-
\backslash
mathbf{x}_{0}$};
\end_layout

\begin_layout Plain Layout


\backslash
node (step4) [startstop, below of=step3] {Compute $
\backslash
beta$ to minimize $f
\backslash
left(
\backslash
mathbf{x}_{0}+
\backslash
beta_{i} 
\backslash
mathbf{u}_{n}
\backslash
right)$};
\end_layout

\begin_layout Plain Layout


\backslash
node (step5) [startstop, below of=step4] {$
\backslash
mathbf{x}_{0} 
\backslash
equiv 
\backslash
mathbf{x}_{0}+
\backslash
beta 
\backslash
mathbf{u}_{n}$};
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
draw [arrow] (step0) -- (step1); 
\backslash
draw [arrow] (step1) -- (step3);
\end_layout

\begin_layout Plain Layout


\backslash
draw [arrow] (step3) -- (step4); 
\backslash
draw [arrow] (step4) -- (step5);
\end_layout

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout


\backslash
end{tikzpicture}
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
newpage{}
\end_layout

\end_inset


\end_layout

\begin_layout Section
The Rosenbrock function
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename pictures/rosen.png
	display false
	scale 30

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
Rosenbrock function (
\begin_inset Formula $z=f(x,y)$
\end_inset

) for 
\begin_inset Formula $a=1\text{ and }b=100$
\end_inset

.
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
The Rosenbrock function (represented in the figure above) is a non-convex
 function which is used as a performance test problem for optimization algorithm
s.
 The global minimum is inside a long, narrow, parabolic shaped flat valley,
 and minimization algorithms usually converge rapidly to this valley, but
 converging to the actual global minimum is harder.
 The function is defined as:
\end_layout

\begin_layout Standard
\align center
\begin_inset Formula $f(x,y)=(a-x)^{2}+b\left(y-x^{2}\right)^{2}$
\end_inset


\end_layout

\begin_layout Standard
Its partial derivatives are:
\end_layout

\begin_layout Standard
\align center
\begin_inset Formula $\frac{\partial f}{\partial x}(x,y)=2(a-x)-4bx(y-x^{2})$
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Formula $\frac{\partial f}{\partial y}(x,y)=2b(y-x^{2})$
\end_inset


\end_layout

\begin_layout Standard
Calculating extremum points:
\end_layout

\begin_layout Standard
\align center
\begin_inset Formula $\frac{\partial f}{\partial y}(x,y)=0\implies y=x^{2}$
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Formula $(y=x^{2}\land\frac{\partial f}{\partial x}(x,y)=0)\implies(x=a\land y=a^{2})$
\end_inset


\end_layout

\begin_layout Standard
\align center
\begin_inset Formula $f(a,a^{2})=0$
\end_inset


\end_layout

\begin_layout Standard
The global minimum is therefore located at 
\begin_inset Formula $(a,a^{2})$
\end_inset

 and its value is 
\begin_inset Formula $0$
\end_inset

.
\end_layout

\end_body
\end_document
